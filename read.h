#ifndef __PREMIER_DATA_H__
#define __PREMIER_DATA_H__

#include <stdlib.h>

#include "premier.h"
#include "bitarray.h"
#include "kmer.h"

/* Functions for short READs generated by genome sequencer */
static inline read_t *read_create()
{
	read_t *tmp_read = malloc(sizeof(*tmp_read));
	if (tmp_read == NULL) {
		return NULL;
	}

	tmp_read->length = 0;
	tmp_read->sequence = NULL;
	tmp_read->qscore = NULL;
	tmp_read->identifier = NULL; 

	return tmp_read;
}

static inline void read_destroy(read_t *tmp_read)
{
	free(tmp_read);
}

static inline void read_seq_to_numeric(const char *rseq, kbits_t *knum,
		int read_len, int kmer_len)
{
	int u64_len = BITS_TO_U64(read_len << 1);
	for (int i = 0; i < u64_len - 1; i++) {
		register kbits_t _partial_k_bits = 0;
		register int ioff = i << 5;

		for (int j = 0; j < 32; j++) {
			_partial_k_bits |= (((kbits_t) base_to_bits(rseq[ioff + j])) 
					<< (j << 1));
		}

		knum[i] = _partial_k_bits;
	}

	register kbits_t _partial_k_bits = 0;
	register int ioff = (u64_len - 1) << 5;
	register int jmax = read_len - ioff;

	for (int j = 0; j < jmax; j++) {
		_partial_k_bits |= (((kbits_t) base_to_bits(rseq[ioff + j])) 
				<< (j << 1));
	}

	knum[u64_len - 1] = _partial_k_bits;
}

void read_parse(data *d, read_t *tmp_read, void *fdata);
void read_parse_trans_count(data *d, read_t *tmp_read, void *fdata);

#endif
